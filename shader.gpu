

// Vertex shader
const vertexShaderSource = `
attribute vec3 vertex;
attribute vec3 normal;
varying vec3 normalMatrixed;
uniform mat4 ModelViewProjectionMatrix;
uniform mat4 NormalMatrix;
uniform vec3 light;
varying vec4 color;

void main() {
    normalMatrixed = vec3(NormalMatrix * vec4(normal, 0.0));
    vec3 N = normalize(normalMatrixed);
    vec3 L = normalize(light - vertex);
    gl_Position = ModelViewProjectionMatrix * vec4(vertex,1.0);
    float lambertian = max(dot(N, L), 0.0);
    float specular = 0.0;
    if(lambertian > 0.0) {
        vec3 R = reflect(L, N);      // Reflected light vector
        vec3 V = normalize(vertex); // Vector to viewer
        // Compute the specular term
        float specAngle = max(dot(R, V), 0.0);
        specular=pow(specAngle,1.0);
    }
    vec3 ambientColor = vec3(1, 01, 0.);
    vec3 diffuseColor = vec3(1, 1, 1);
    vec3 specularColor = vec3(0.,0.,0.);
    color = vec4(ambientColor +
                lambertian * diffuseColor +
                specular * specularColor, 1.0);
}`;

//
// Fragment shader
const fragmentShaderSource = `
#ifdef GL_FRAGMENT_PRECISION_HIGH
   precision mediump float;
#else
   precision highp float;
#endif

//uniform vec4 color;
varying vec4 color;
void main() {
    gl_FragColor = color;
}`;